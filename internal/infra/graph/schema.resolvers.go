package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"context"

	"github.com/devfullcycle/20-CleanArch/internal/infra/graph/model"
	"github.com/devfullcycle/20-CleanArch/internal/usecase"
)

// Mutations
func (r *mutationResolver) CreateOrder(ctx context.Context, input model.CreateOrderInput) (*model.Order, error) {
	output, err := r.CreateOrderUseCase.Execute(usecase.OrderInputDTO{
		Price: input.Price,
		Tax:   input.Tax,
	})
	if err != nil {
		return nil, err
	}
	return &model.Order{
		ID:         output.ID,
		Price:      output.Price,
		Tax:        output.Tax,
		FinalPrice: output.FinalPrice,
	}, nil
}

// Queries
func (r *queryResolver) Orders(ctx context.Context, page *int, perPage *int) ([]*model.Order, error) {
	pg, pp := 1, 10
	if page != nil {
		pg = *page
	}
	if perPage != nil {
		pp = *perPage
	}
	output, err := r.ListOrdersUseCase.Execute(ctx, usecase.ListOrdersInput{Page: pg, PerPage: pp})
	if err != nil {
		return nil, err
	}
	orders := make([]*model.Order, 0, len(output.Orders))
	for _, o := range output.Orders {
		orders = append(orders, &model.Order{
			ID:         o.ID,
			Price:      o.Price,
			Tax:        o.Tax,
			FinalPrice: o.FinalPrice,
		})
	}
	return orders, nil
}

// Order is the resolver for the order field.
func (r *queryResolver) Order(ctx context.Context, id string) (*model.Order, error) {
	return nil, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
